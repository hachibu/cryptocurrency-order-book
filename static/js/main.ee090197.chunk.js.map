{"version":3,"sources":["OrderBook/utils.ts","OrderBookTable/index.tsx","BitstampWebSocket.ts","OrderBook/index.tsx","App/index.tsx","index.tsx"],"names":["currencyOptions","map","a","b","value","label","OrderBookTable","React","memo","props","useMemo","currencyPair","price","slice","size","toUpperCase","parseCurrencyPair","priceType","sizeType","getPriceClassName","changed","side","className","colSpan","dataRows","BitstampWebSocket","handleOpen","this","onopen","handleMessage","onmessage","data","send","JSON","stringify","event","WebSocket","rowShouldUpdate","newRow","oldRow","OrderBook","useState","asks","bids","setData","setCurrencyPair","useEffect","ws","onOpen","subscribe","channel","onMessage","msg","parse","newData","i","newAsk","newBid","close","onChange","e","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee090197.chunk.js","sourcesContent":["export function parseCurrencyPair(currencyPair: string): [string, string] {\n  const price = currencyPair.slice(3)\n  const size = currencyPair.slice(0, 3)\n  return [price.toUpperCase(), size.toUpperCase()]\n}\n\nexport const currencyPairs: [string, string][] = [\n  ['btc','usd'],\n  ['btc','eur'],\n  ['btc','gbp'],\n  ['btc','pax'],\n  ['btc','usdc'],\n  ['gbp','usd'],\n  ['gbp','eur'],\n  ['eur','usd'],\n  ['xrp','usd'],\n  ['xrp','eur'],\n  ['xrp','btc'],\n  ['xrp','gbp'],\n  ['xrp','pax'],\n  ['ltc','usd'],\n  ['ltc','eur'],\n  ['ltc','btc'],\n  ['ltc','gbp'],\n  ['eth','usd'],\n  ['eth','eur'],\n  ['eth','btc'],\n  ['eth','gbp'],\n  ['eth','pax'],\n  ['eth','usdc'],\n  ['bch','usd'],\n  ['bch','eur'],\n  ['bch','btc'],\n  ['bch','gbp'],\n  ['pax','usd'],\n  ['pax','eur'],\n  ['pax','gbp'],\n  ['xlm','btc'],\n  ['xlm','usd'],\n  ['xlm','eur'],\n  ['xlm','gbp'],\n  ['link','usd'],\n  ['link','eur'],\n  ['link','gbp'],\n  ['link','btc'],\n  ['link','eth'],\n  ['omg','usd'],\n  ['omg','eur'],\n  ['omg','gbp'],\n  ['omg','btc'],\n  ['usd','cusd'],\n  ['usd','ceur']\n]\n\nexport const currencyOptions = currencyPairs.map(\n  ([a, b]) => ({ value: a + b, label: a + '-' + b })\n)\n","import React, { FC, useMemo } from 'react'\nimport { parseCurrencyPair } from '../OrderBook/utils'\nimport { DataRow } from '../OrderBook/types'\n\ninterface OrderBookTableProps {\n  side: string\n  currencyPair: string\n  dataRows: DataRow[]\n}\n\nconst OrderBookTable: FC<OrderBookTableProps> = React.memo((props) => {\n  const [priceType, sizeType] = useMemo(\n    () => parseCurrencyPair(props.currencyPair),\n    [props.currencyPair]\n  )\n\n  const getPriceClassName = (changed: boolean): string => {\n    if (changed) {\n      if (props.side === 'asks') {\n        return 'flash--red'\n      } else if (props.side === 'bids') {\n        return 'flash--green'\n      }\n    }\n    return ''\n  }\n\n  const getSizeClassName = (): string => {\n    return props.side === 'bids' ? 'text-success' : 'text-danger'\n  }\n\n  return (\n    <table className=\"order-book-table table table-dark table-striped w-50\">\n      <thead>\n        <tr>\n          <th className=\"text-capitalize\" colSpan={2}>{props.side}</th>\n        </tr>\n        <tr>\n          <th>Price ({priceType})</th>\n          <th>Size ({sizeType})</th>\n        </tr>\n      </thead>\n      <tbody>\n        {props.dataRows.map(([price, size, changed]) => (\n          <tr key={price}>\n            <td className={getPriceClassName(changed)}>{price}</td>\n            <td className={getSizeClassName()}>{size}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n})\n\nexport default OrderBookTable\n","export default class BitstampWebSocket extends WebSocket {\n  constructor() {\n    super('wss://ws.bitstamp.net')\n  }\n\n  onOpen(handleOpen: () => void) {\n    this.onopen = handleOpen\n  }\n\n  onMessage(handleMessage: (event: MessageEvent<any>) => void) {\n    this.onmessage = handleMessage\n  }\n\n  subscribe(data: {}) {\n    this.send(JSON.stringify({ event: 'bts:subscribe', data }))\n  }\n}\n","import React, { FC, useState, useEffect } from 'react'\nimport './index.scss'\nimport { currencyOptions } from './utils'\nimport { Data } from './types'\nimport OrderBookTable from '../OrderBookTable'\nimport BitstampWebSocket from '../BitstampWebSocket'\n\nfunction rowShouldUpdate(newRow: [string, string], oldRow: [string, string, boolean]): boolean {\n  return !oldRow ? true : newRow[0] !== oldRow[0] || newRow[1] !== oldRow[1]\n}\n\nconst OrderBook: FC = React.memo(() => {\n  const [data, setData] = useState<Data>({ asks: [], bids: [] })\n  const [currencyPair, setCurrencyPair] = useState('btcusd')\n\n  useEffect(() => {\n    const ws = new BitstampWebSocket()\n\n    ws.onOpen(() => ws.subscribe({ channel: `order_book_${currencyPair}` }))\n\n    ws.onMessage(event => {\n      const msg = JSON.parse(event.data)\n      if (msg.event === 'data') {\n        setData(data => {\n          let newData: Data = {\n            asks: [],\n            bids: []\n          }\n          for (let i = 0; i < 100; i++) {\n            let newAsk: [string, string] = msg.data.asks[i]\n            let newBid: [string, string] = msg.data.bids[i]\n            newData.asks[i] = [...newAsk, rowShouldUpdate(newAsk, data.asks[i])]\n            newData.bids[i] = [...newBid, rowShouldUpdate(newBid, data.bids[i])]\n          }\n          return newData\n        })\n      }\n    })\n\n    return () => ws.close()\n  }, [currencyPair])\n\n  return (\n    <div className=\"text-white\">\n      <div className=\"d-flex align-items-center justify-content-between m-2\">\n        <h5 className=\"m-0\">Cryptocurrency Order Book</h5>\n        <div>\n          <select value={currencyPair}\n                  className=\"form-select form-select-sm\"\n                  onChange={(e) => setCurrencyPair(e.target.value)}>\n            {currencyOptions.map(({ value, label }) => (\n              <option key={value} value={value}>{label}</option>\n            ))}\n          </select>\n        </div>\n      </div>\n      <div className=\"d-flex\">\n        <OrderBookTable side=\"bids\" currencyPair={currencyPair} dataRows={data.bids} />\n        <OrderBookTable side=\"asks\" currencyPair={currencyPair} dataRows={data.asks} />\n      </div>\n    </div>\n  )\n})\n\nexport default OrderBook\n","import React, { FC } from 'react'\nimport OrderBook from '../OrderBook'\n\nconst App: FC = React.memo(() => <OrderBook />)\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}